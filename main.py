import os
import glob
import hashlib
import logging
import subprocess
import re
import json
import math
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.exceptions import BadRequest
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from moviepy.editor import VideoFileClip

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv("API_TOKEN")
CHANNEL_USERNAME = '@bbacckkeennddtestchannell'
FFMPEG_PATH = r"C:\Users\cursed\AppData\Local\Microsoft\WinGet\Links\ffmpeg.exe"
DOWNLOAD_PATH = "downloads"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
storage = MemoryStorage()
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(DOWNLOAD_PATH):
    os.makedirs(DOWNLOAD_PATH)

def generate_short_id(url: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π ID –¥–ª—è URL"""
    return hashlib.md5(url.encode()).hexdigest()[:8]

async def get_video_info(url: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ, –≤–∫–ª—é—á–∞—è —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤"""
    try:
        command = [
            "yt-dlp",
            "--no-warnings",
            "--no-check-certificate",
            "--dump-json",
            url
        ]
        
        if "instagram.com" in url:
            command.extend([
                "--add-header", "User-Agent:Instagram 219.0.0.12.117 Android",
            ])
        
        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True
        )
        
        stdout, stderr = process.communicate()
        if process.returncode == 0:
            info = json.loads(stdout)
            formats = info.get('formats', [])
            
            def find_format_size(height):
                matching_formats = [f for f in formats if f.get('height') == height]
                if matching_formats:
                    with_audio = [f for f in matching_formats if f.get('acodec') != 'none']
                    if with_audio:
                        return with_audio[0].get('filesize', 0)
                    return matching_formats[0].get('filesize', 0)
                return 0

            sizes = {
                '144p': find_format_size(144) or 5 * 1024 * 1024,
                '360p': find_format_size(360) or 15 * 1024 * 1024,
                '480p': find_format_size(480) or 25 * 1024 * 1024,
                '720p': find_format_size(720) or 50 * 1024 * 1024,
                'best': max((f.get('filesize', 0) for f in formats), default=100 * 1024 * 1024)
            }
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
            prev_size = 0
            for quality in ['144p', '360p', '480p', '720p', 'best']:
                if sizes[quality] < prev_size:
                    sizes[quality] = prev_size * 1.5
                prev_size = sizes[quality]
                
            return sizes
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ")
    return None

async def download_media(url: str, quality: str = 'best') -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º"""
    try:
        output_path_template = os.path.join(DOWNLOAD_PATH, "%(title)s.%(ext)s")
        
        quality_formats = {
            '144p': 'bestvideo[height<=144][ext=mp4]+bestaudio[ext=m4a]/worst[ext=mp4]',
            '360p': 'bestvideo[height<=360][ext=mp4]+bestaudio[ext=m4a]/best[height<=360][ext=mp4]',
            '480p': 'bestvideo[height<=480][ext=mp4]+bestaudio[ext=m4a]/best[height<=480][ext=mp4]',
            '720p': 'bestvideo[height<=720][ext=mp4]+bestaudio[ext=m4a]/best[height<=720][ext=mp4]',
            'best': 'best[ext=mp4]/best'
        }
        
        format_spec = quality_formats.get(quality, quality_formats['best'])

        command = [
            "yt-dlp",
            "-f", format_spec,
            "--no-warnings",
            "--no-check-certificate",
            "--ffmpeg-location", FFMPEG_PATH,
            "--merge-output-format", "mp4",
            "-o", output_path_template,
        ]

        if "instagram.com" in url:
            command.extend([
                "--add-header", "User-Agent:Instagram 219.0.0.12.117 Android",
            ])
        elif "youtube.com" in url or "youtu.be" in url:
            command.extend(["--no-playlist"])

        command.append(url)

        process = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True
        )
        
        stdout, stderr = process.communicate()
        
        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {stderr}")
            return None

        downloaded_files = glob.glob(os.path.join(DOWNLOAD_PATH, "*.mp4"))
        if downloaded_files:
            return max(downloaded_files, key=os.path.getctime)
        return None
        
    except Exception as e:
        logger.exception("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")
        return None

async def split_and_send_video(bot, chat_id, file_path, caption, max_size_mb=50):
    """–†–∞–∑–¥–µ–ª—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –ø–æ —á–∞—Å—Ç—è–º"""
    try:
        video = VideoFileClip(file_path)
        duration = video.duration
        video.close()
        
        file_size = os.path.getsize(file_path)
        
        if file_size <= max_size_mb * 1024 * 1024:
            with open(file_path, 'rb') as video_file:
                await bot.send_document(
                    chat_id,
                    types.InputFile(video_file),
                    caption=f"{caption}\n–ß–∞—Å—Ç—å 1/1"
                )
            return True
            
        parts = math.ceil(file_size / (max_size_mb * 1024 * 1024))
        segment_duration = duration / parts
        
        temp_dir = os.path.join(DOWNLOAD_PATH, "temp_parts")
        os.makedirs(temp_dir, exist_ok=True)
        
        for i in range(parts):
            start_time = i * segment_duration
            end_time = min((i + 1) * segment_duration, duration)
            
            output_path = os.path.join(temp_dir, f"part_{i+1}.mp4")
            
            command = [
                FFMPEG_PATH,
                "-i", file_path,
                "-ss", str(start_time),
                "-t", str(end_time - start_time),
                "-c", "copy",
                output_path
            ]
            
            subprocess.run(command)
            
            with open(output_path, 'rb') as part_file:
                await bot.send_document(
                    chat_id,
                    types.InputFile(part_file),
                    caption=f"{caption}\n–ß–∞—Å—Ç—å {i+1}/{parts}"
                )
            
            os.remove(output_path)
        
        os.rmdir(temp_dir)
        return True
        
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:")
        return False

async def is_subscribed(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –∫–∞–Ω–∞–ª"""
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ start –∏ help"""
    if not await is_subscribed(message.from_user.id):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"))
        keyboard.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
            reply_markup=keyboard
        )
    else:
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.\n\n"
            "üé• –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:\n"
            "‚Ä¢ YouTube\n"
            "‚Ä¢ Instagram (–ø–æ—Å—Ç—ã –∏ reels)\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ!"
        )

@dp.callback_query_handler(lambda c: c.data == 'check_subscription')
async def handle_subscription_check(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback_query.from_user.id
    if await is_subscribed(user_id):
        await callback_query.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!", show_alert=True)
        await bot.send_message(user_id, "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube –∏–ª–∏ Instagram.")
    else:
        await callback_query.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)

@dp.message_handler(content_types=['text'])
async def handle_link(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏"""
    if not await is_subscribed(message.from_user.id):
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"))
        keyboard.add(InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription"))
        await message.reply(
            "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'.",
            reply_markup=keyboard
        )
        return

    url = message.text.strip()

    if not (url.startswith("http://") or url.startswith("https://")):
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    youtube_regex = r"(?:https?://)?(?:www\.)?(?:youtube\.com\/(?:[^\/\n\s]+\/\S+\/|(?:v\/|e\/|watch\?v=))|youtu\.be\/)([a-zA-Z0-9_-]{11})"
    instagram_regex = r"(?:https?://)?(?:www\.)?instagram\.com/(?:p/|reel/|reels/)([A-Za-z0-9_-]+)"

    if re.match(youtube_regex, url) or re.match(instagram_regex, url):
        try:
            processing_message = await message.reply("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ...")
            
            short_id = generate_short_id(url)
            keyboard = InlineKeyboardMarkup(row_width=2)
            
            sizes = await get_video_info(url) or {
                '144p': 5 * 1024 * 1024,
                '360p': 15 * 1024 * 1024,
                '480p': 25 * 1024 * 1024,
                '720p': 50 * 1024 * 1024,
                'best': 100 * 1024 * 1024
            }
            
            buttons = []
            for quality, size in sizes.items():
                if size < 2 * 1024 * 1024 * 1024:  # –º–µ–Ω—å—à–µ 2GB
                    size_mb = size / (1024 * 1024)
                    button_text = f"üì± {quality} ({size_mb:.1f}MB)"
                    if quality == 'best':
                        button_text = f"üé• –ú–∞–∫—Å. ({size_mb:.1f}MB)"
                    buttons.append(InlineKeyboardButton(
                        button_text,
                        callback_data=f"download_{short_id}_{quality}"
                    ))
            
            keyboard.add(*buttons)
            
            await processing_message.edit_text(
                "üé¨ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:",
                reply_markup=keyboard
            )
            
            await dp.storage.set_data(
                chat=message.chat.id,
                user=message.from_user.id,
                data={short_id: url}
            )
            
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏:")
            await message.reply(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    else:
        await message.reply(
            "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞!\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ YouTube: youtube.com/watch?v=... –∏–ª–∏ youtu.be/...\n"
            "‚Ä¢ Instagram: instagram.com/p/... –∏–ª–∏ instagram.com/reel/..."
        )

@dp.callback_query_handler(lambda c: c.data.startswith('download_'))
async def handle_download(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
    try:
        _, short_id, quality = callback_query.data.split("_")
        data = await dp.storage.get_data(chat=callback_query.message.chat.id, user=callback_query.from_user.id)
        url = data.get(short_id)

        if not url:
            await callback_query.answer("‚ùå –°—Å—ã–ª–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë —Å–Ω–æ–≤–∞.", show_alert=True)
            return

        status_message = await bot.edit_message_text(
            "‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
            callback_query.message.chat.id,
            callback_query.message.message_id
        )

        file_path = await download_media(url, quality)

        if file_path:
            try:
                await status_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
                
                file_size = os.path.getsize(file_path)
                is_youtube = 'youtube' in url or 'youtu.be' in url
                
                if file_size > 50 * 1024 * 1024:
                    await status_message.edit_text("üì§ –†–∞–∑–¥–µ–ª—è—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ –ø–æ —á–∞—Å—Ç—è–º...")
                    caption = f"üé• –ö–∞—á–µ—Å—Ç–≤–æ: {quality}\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {'YouTube' if is_youtube else 'Instagram'}"
                    success = await split_and_send_video(bot, callback_query.from_user.id, file_path, caption)
                    
                    if success:
                        await status_message.edit_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ —á–∞—Å—Ç—è–º!")
                    else:
                        await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ –ø–æ —á–∞—Å—Ç—è–º.")
                else:
                    with open(file_path, 'rb') as video:
                        await bot.send_video(
                            callback_query.from_user.id,
                            video,
                            caption=f"üé• –ö–∞—á–µ—Å—Ç–≤–æ: {quality}\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {'YouTube' if is_youtube else 'Instagram'}",
                            supports_streaming=True
                        )
                    await status_message.edit_text("‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                
                os.remove(file_path)
                
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:")
                error_msg = (
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. "
                    f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024*1024):.1f} –ú–ë\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ –¥—Ä—É–≥–æ–µ –≤–∏–¥–µ–æ."
                )
                await status_message.edit_text(error_msg)
                try:
                    os.remove(file_path)
                except OSError:
                    pass
        else:
            await status_message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n"
                "‚Ä¢ –í–∏–¥–µ–æ –∑–∞—â–∏—â–µ–Ω–æ\n"
                "‚Ä¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ –≤–∏–¥–µ–æ."
            )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query:")
        await bot.send_message(
            callback_query.from_user.id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ."
        )

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)